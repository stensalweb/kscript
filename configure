#!/usr/bin/env python
""" configure - build configuration script, use like autotools

Usage: 
$ ./configure -h
[HELP MESSAGE]

$ ./configure && make


"""

import sys
import os
import glob

import argparse

class NegateAction(argparse.Action):
    def __call__(self, parser, ns, values, option):
        setattr(ns, self.dest, not option[2:].startswith('disable') and not option[2:].startswith('without') and not option[2:].startswith('no'))

parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=40))

parser.add_argument('-V', nargs=3, type=int, help='The version of kscript (MAJOR, MINOR, PATCH)', default=[0, 0, 1])
parser.add_argument('--build-type', help='The build type that will be ran', choices=['debug', 'release'], default='release')
parser.add_argument('--dest-dir', help='Set the destination local directory (useful for making .deb packages, for example)', default=None)
parser.add_argument('--prefix', help='Set the prefix directory for installation', default=None)


parser.add_argument('-M', nargs='*', help='Modules to build with kscript', default=glob.glob("modules/*"))

# enable/disable features
parser.add_argument('--enable-trace', '--disable-trace', dest='trace', action=NegateAction, nargs=0, help='Enables/disables \'ks_trace()\', disabling may increase performance', default=True)
parser.add_argument('--enable-rpath', '--disable-rpath', dest='rpath', action=NegateAction, nargs=0, help='Enables/disables the use of local library paths, useful for local installations only. Use `--disable-rpath` for any packages/installed programs', default=True)


args = parser.parse_args()

# -*- Config Vars

CC        = os.environ.get("CC",        "cc")
CFLAGS    = os.environ.get("CFLAGS",    "-O3 -std=c99")
LDFLAGS   = os.environ.get("LDFLAGS",   "")

PREFIX    = args.prefix if args.prefix else os.environ.get("PREFIX",    "/usr/local")
DESTDIR   = args.dest_dir if args.dest_dir else os.environ.get("DESTDIR", "")

PWD       = os.getcwd()



# -*- Generate Files


# helper function to glob recursively and create a string of all results
def files(glob_pat, recursive=True):
    return " ".join(glob.glob(glob_pat, recursive=True))

# helper class for configuration
class _WithMessage:
	def __init__(self, name):
		self.name = name

	def __enter__(self):
		print (f" -- Configuring  '{self.name}'...")

	def __exit__(self, type, value, traceback):
		print (f" --   Done")


def genMsg(name, opts={}):
	print(" --- Configuring")

# command to run on 'makefile' target success
MAKE_success = '@echo "\\n|| Built: $@\\n"'

# newline
_newline = "\n"

## include/ks-config.h



# ending for a shared object (i.e. '.so' or '.dll')
SHARED_END = "so"
STATIC_END = "a"

KS_API_IMPORT = ""
KS_API_EXPORT = ""

# header file warnings
defs = [

]

# platforms
if sys.platform in ('linux', 'linux2'):
    defs.append("KS__LINUX")
elif sys.platform in ('darwin', ):
    defs.append("KS__MACOS")
elif sys.platform in ('win32', ):
    SHARED_END = "dll"
    STATIC_END = "lib"

    KS_API_IMPORT = "__declspec(dllimport)"
    KS_API_EXPORT = "__declspec(dllexport)"

    defs.append("KS__WINDOWS")

elif sys.platform in ('cygwin', ):
    SHARED_END = "dll"
    STATIC_END = "lib"

    KS_API_IMPORT = "__declspec(dllimport)"
    KS_API_EXPORT = "__declspec(dllexport)"

    defs.append("KS__CYGWIN")
else:
    defs.append("KS__OTHER")

defs.append("KS_SHARED_END \"" + SHARED_END + "\"")
defs.append("KS_STATIC_END \"" + STATIC_END + "\"")

warns = [

]

if "KS_OTHER" in defs:
    warns.append(f"Unknown platform '{sys.platform}' (from './configure' script)")


with _WithMessage("./include/ks-config"):

	f_config = open("./include/ks-config.h", "w")

	f_config.write(f"""/* ks_config.h - (generated by ./configure). Please rerun ./configure, and do NOT modify this file!
*
* Configure Script Ran:
* $ {" ".join(sys.argv)}
*
* Vars:
* CC            = {CC}
* CFLAGS        = {CFLAGS}
* LDFLAGS       = {LDFLAGS}
* PREFIX        = {PREFIX}
* DESTDIR       = {DESTDIR}
* PWD           = {PWD}
* V             = {args.V}
* BUILD_TYPE    = {args.build_type}
* MODULES       = {args.M}
*
*
* Misc.:
* sys.platform  = {sys.platform}
*
*/

#pragma once
#ifndef KS_CONFIG_H__
#define KS_CONFIG_H__

#ifdef __cplusplus
extern "C" {{
#endif


/* VERSION */

#define KS_VERSION_MAJOR {args.V[0]}
#define KS_VERSION_MINOR {args.V[1]}
#define KS_VERSION_PATCH {args.V[2]}

#define KS_BUILD_STR "{args.build_type}"
#define KS_BUILD_{args.build_type.upper()}


/* platform info */

#define KS_PLATFORM_NAME "{sys.platform}"

#define KS_API_EXPORT {KS_API_EXPORT}
#define KS_API_IMPORT {KS_API_IMPORT}

#ifdef KS_BUILD
#define KS_API KS_API_EXPORT
#else
#define KS_API KS_API_IMPORT
#endif

#define KS_PREFIX "{PREFIX}"


/* misc. defines */

{_newline.join("#define " + str(df) for df in defs)}


/* warnings */

{_newline.join("#warning " + str(df) for df in warns)}


#ifdef __cplusplus
}}
#endif

#endif /* KS_CONFIG_H__ */

""")

	f_config.close()


## ./Makefile

with _WithMessage("./Makefile"):
	f_Makefile = open("./Makefile", "w")

	f_Makefile.write(f"""# -*- Makefile (generated by ./configure). Please rerun ./configure, and do NOT modify this file! -*-

# -*- VARS -*-

SHARED_END       := {SHARED_END}
export SHARED_END
STATIC_END       := {STATIC_END}
export STATIC_END

STRIP_OPTS       ?= --strip-debug --strip-unneeded
export STRIP_OPTS

KS_VERSION_MAJOR := {args.V[0]}
export KS_VERSION_MAJOR
KS_VERSION_MINOR := {args.V[1]}
export KS_VERSION_MINOR
KS_VERSION_PATCH := {args.V[2]}
export KS_VERSION_PATCH

KS_VERSION       := $(KS_VERSION_MAJOR).$(KS_VERSION_MINOR).$(KS_VERSION_PATCH)
export KS_VERSION

CC               := {CC}
export CC
CFLAGS           := {CFLAGS}
export CFLAGS
LDFLAGS          := {LDFLAGS}
export LDFLAGS

# only should be enabled in local builds
RPATH_FLAGS      := {"-Wl,-rpath,'$$ORIGIN' -Wl,-rpath,'$$ORIGIN/../lib' -Wl,-rpath,./lib -Wl,-rpath-link,./" if args.rpath else ""}

KS_DIR           := {PWD}
export KS_DIR

PREFIX           ?= {PREFIX}
export PREFIX
DESTDIR          ?= {DESTDIR}
export DESTDIR


_tmp             := {".tmp"}

STD_MODULES      := {" ".join(args.M)}

## modifying vars
CFLAGS           += -I{PWD}/include
LDFLAGS          += -L{PWD}/lib

# -*- FILES -*-

# general purpose headers
all_H            := $(wildcard include/*.h)
ks_H             := $(all_H)
export ks_H

# kscript library
libks_C          := {files("src/library/*.c")} {files("src/library/types/*.c")}

# kscript binary/commandline executable
ks_C             := {files("src/cmdline/*.c")}


# -*- TARGETS -*-

# target files
libks_SHARED     := {PWD}/lib/libks.$(SHARED_END)
export libks_SHARED
libks_STATIC     := {PWD}/lib/libks.$(STATIC_END)
export libks_STATIC
ks_BIN           := bin/ks

# generated
libks_O          := $(patsubst %.c,$(_tmp)/%.o,$(libks_C))
ks_O             := $(patsubst %.c,$(_tmp)/%.o,$(ks_C))


# -*- RULES -*-

.PHONY: all default clean install uninstall modules FORCE



# default target to build
default: $(libks_SHARED) modules $(ks_BIN)

# build everything
all: default

clean: FORCE
	rm -rf $(wildcard $(_tmp) debian/usr build lib bin *.deb)
	for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir clean || exit 1 ; \\
	done

modules: $(libks_SHARED) FORCE
	for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir || exit 1 ; \\
	done

# target to force another target
FORCE:

# rule to install the whole package to PREFIX
install: default $(libks_STATIC) $(ks_H) FORCE
	install -d $(DESTDIR)$(PREFIX)/bin/
	install -d $(DESTDIR)$(PREFIX)/lib/
	install -d $(DESTDIR)$(PREFIX)/share/doc/kscript
	install -d $(DESTDIR)$(PREFIX)/include/
	install -d $(DESTDIR)$(PREFIX)/share/man/man1

	install -m 755 $(ks_BIN) $(DESTDIR)$(PREFIX)/bin/
	install -m 644 $(libks_SHARED).$(KS_VERSION) $(libks_STATIC) $(DESTDIR)$(PREFIX)/lib/
	install -m 644 $(all_H) $(DESTDIR)$(PREFIX)/include/
	install -m 644 $(wildcard {PWD}/share/doc/*) $(DESTDIR)$(PREFIX)/share/doc/kscript
	install -m 644 $(wildcard {PWD}/share/man/man1/*) $(DESTDIR)$(PREFIX)/share/man/man1

	#mv $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED)) $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED)).$(KS_VERSION)

	rm -f $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED))
	ln -s libks.$(SHARED_END).$(KS_VERSION) $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED))

	gzip -9 -n -f $(DESTDIR)$(PREFIX)/share/doc/kscript/changelog
	mv $(DESTDIR)$(PREFIX)/share/doc/kscript/changelog.gz $(DESTDIR)$(PREFIX)/share/doc/kscript/changelog.Debian.gz

	gzip -9 -n -f $(DESTDIR)$(PREFIX)/share/man/man1/ks.1

	for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir install || exit 1 ; \\
	done



# rule to uninstall the whole package from PREFIX
uninstall: FORCE
	rm -f $(DESTDIR)$(PREFIX)/bin/$(notdir $(ks_BIN))
	rm -f $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_STATIC)) $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED)) $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED)).$(KS_VERSION)
	rm -f $(patsubst %,$(DESTDIR)$(PREFIX)/include/%,$(notdir $(all_H)))

	for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir uninstall || exit 1 ; \\
	done

# rule to compile a single object file
$(_tmp)/src/%.o: src/%.c $(all_H)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -DKS_BUILD $< -fPIC -c -o $@

# rule to build the shared object file (.so) from all the individual compilations
# Since `libks_o` contains many files, we use `$^` to mean `all input files together`
$(libks_SHARED): $(libks_O)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) \\
		$^ $(LDFLAGS) \\
		-Wl,-soname,libks.so.$(KS_VERSION) \\
		-shared -o $@.$(KS_VERSION)
	strip $@.$(KS_VERSION) $(STRIP_OPTS)
	rm -f $@
	ln -s libks.$(SHARED_END).$(KS_VERSION) $@
	{MAKE_success}

# rule to build the static object file (.a)
$(libks_STATIC): $(libks_O)
	@mkdir -p $(dir $@)
	$(AR) cr $@ $^
	strip $@ $(STRIP_OPTS)
	{MAKE_success}

# rule to build the executable (no extension) from the library and it's `.o`'s
#   since we require a library, and object files, we don't use `$^`, but just build
#   explicitly
$(ks_BIN): $(libks_SHARED) modules $(ks_O)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(ks_O) $(LDFLAGS) \\
		-L../lib -L{PWD}/lib $(RPATH_FLAGS) \\
		$(libks_SHARED).$(KS_VERSION) -lm -ldl -lpthread \\
		-o $@
	strip $@ $(STRIP_OPTS)
	{"cp $(libks_SHARED).$(KS_VERSION) $(dir $@)" if "KS__WINDOWS" in defs or "KS__CYGWIN" in defs else ""}
	{MAKE_success}



""")

	f_Makefile.close()







