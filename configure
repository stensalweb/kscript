#!/usr/bin/env python3
""" configure - build configuration script, use like autotools

Usage: 
$ ./configure -h
[HELP MESSAGE]

$ ./configure && make


"""

import sys
import os
import subprocess
import platform
import glob
import configparser

import argparse

class NegateAction(argparse.Action):
    def __call__(self, parser, ns, values, option):
        setattr(ns, self.dest, not option[2:].startswith('disable') and not option[2:].startswith('without') and not option[2:].startswith('no'))

parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=40))

parser.add_argument('-V', nargs=3, type=int, help='The version of kscript (MAJOR, MINOR, PATCH)', default=[0, 0, 1])
parser.add_argument('--build-type', help='The build type that will be ran', choices=['debug', 'release'], default='release')
parser.add_argument('--dest-dir', help='Set the destination local directory (useful for making .deb packages, for example)', default=None)
parser.add_argument('--prefix', help='Set the prefix directory for installation', default=None)

all_modules = glob.glob("modules/*")
parser.add_argument('-M', nargs='*', help='Modules to build with kscript', default=all_modules)

# enable/disable features
parser.add_argument('--enable-trace', '--disable-trace', dest='trace', action=NegateAction, nargs=0, help='Enables/disables \'ks_trace()\', disabling may increase performance', default=True)
parser.add_argument('--enable-rpath', '--disable-rpath', dest='rpath', action=NegateAction, nargs=0, help='Enables/disables the use of local library paths, useful for local installations only. Use `--disable-rpath` for any packages/installed programs', default=True)

parser.add_argument('--with-colors', '--without-colors', dest='with_colors', action=NegateAction, nargs=0, help='Enables/disables color output in the library, binary, and build system', default=True)

parser.add_argument('--with-gmp', '--without-gmp', dest='with_gmp', action=NegateAction, nargs=0, help='Enables/disables using the GNU MP (GMP) library for multiprecision', default=None)
parser.add_argument('--with-readline', '--without-readline', dest='with_readline', action=NegateAction, nargs=0, help='Enables/disables using the GNU readline library for command line interpreting', default=None)
parser.add_argument('--with-curl', '--without-curl', dest='with_curl', action=NegateAction, nargs=0, help='Enables/disables using the CURL library for network operations', default=None)
parser.add_argument('--with-glfw3', '--without-glfw3', dest='with_glfw3', action=NegateAction, nargs=0, help='Enables/disables using the GLFW3 library for GUI', default=None)
parser.add_argument('--with-libav', '--without-libav', dest='with_libav', action=NegateAction, nargs=0, help='Enables/disables using the libav (Audio/Video) library for multi-media operations', default=None)
parser.add_argument('--with-ffi', '--without-ffi', dest='with_ffi', action=NegateAction, nargs=0, help='Enables/disables using the FFI (Foreign Function Interface) library for Cfuncs', default=None)
parser.add_argument('--with-fftw3', '--without-fftw3', dest='with_fftw3', action=NegateAction, nargs=0, help='Enables/disables using the FFTW3 (Fastest-Fourier-Transform in the West) library for FFT speed up', default=None)

args = parser.parse_args()



# colors
# https://misc.flogisoft.com/bash/tip_colors_and_formatting


class Col:
	# -- Format Codes --

	RESET    = '\033[0m'
	
	BOLD     = '\033[1m'
	DIM      = '\033[2m'
	ULIN     = '\033[4m'
	BLINK    = '\033[5m'
	RVRS     = '\033[7m'
	HIDE     = '\033[8m'

	# -- Text Col --

	DFT      = '\033[39m'

	WHT      = '\033[97m'
	BLK      = '\033[30m'

	GRY      = '\033[90m'
	LGRY     = '\033[37m'

	RED      = '\033[31m'
	GRN      = '\033[32m'
	YLW      = '\033[33m'
	BLU      = '\033[34m'
	MGA      = '\033[35m'
	CYN      = '\033[36m'

	LRED     = '\033[91m'
	LGRN     = '\033[92m'
	LYLW     = '\033[93m'
	LBLU     = '\033[94m'
	LMGA     = '\033[95m'
	LCYN     = '\033[96m'

	# -- Background Col --

	BK_DFT   = '\033[49m'

	BK_WHT   = '\033[107m'
	BK_BLK   = '\033[40m'

	BK_GRY   = '\033[100m'
	BK_LGRY  = '\033[47m'


	BK_RED   = '\033[41m'
	BK_GRN   = '\033[42m'
	BK_YLW   = '\033[43m'
	BK_BLU   = '\033[44m'
	BK_MGA   = '\033[45m'
	BK_CYN   = '\033[46m'

	BK_LRED  = '\033[101m'
	BK_LGRN  = '\033[102m'
	BK_LYLW  = '\033[103m'
	BK_LBLU  = '\033[104m'
	BK_LMGA  = '\033[105m'
	BK_LCYN  = '\033[106m'

	# -*- Aliases -*-
    # (these are replaced via 'setattr' later)
	WARN     = '$YLW'
	FAIL     = '$RED'
	SUCC     = '$GRN'



# if we don't want to use colors, set every attribute of the class to '', i.e. no color formatting
if not args.with_colors:
	for a in dir(Col):
		if not a.startswith('__'):
			setattr(Col, a, '')

c_color_defs = []

# now, replace aliases that begin with '$'
for a in dir(Col):
	v = getattr(Col, a)
	if not a.startswith('__') and v.startswith('$'):
		setattr(Col, a, getattr(Col, v[1:]))
	if not a.startswith('__'):
		# convert to C string
		cstr = repr(getattr(Col, a)).replace('\'', '\"')
		c_color_defs += [f"#define COL_{a} {cstr}"]


c_color_defs = "\n".join(c_color_defs)

class BuildError(Exception):
    """ BuildError - raised when an error in building occurs
    """

    def __init__(self, target, message):
        self.target = target
        self.message = message
        super().__init__(f"{Col.FAIL}FAIL: {Col.BLU}{self.target}{Col.RESET}: {Col.WARN}{self.message}{Col.RESET}")


# run a shell command
def shell(cmd):
	print (f" $ {cmd}")
	return os.system(cmd) == 0



# -*- Config Vars

CC        = os.environ.get("CC",        "cc")
CFLAGS    = os.environ.get("CFLAGS",    "-O3 -std=c99")
LDFLAGS   = os.environ.get("LDFLAGS",   "")

PREFIX    = os.path.abspath(args.prefix if args.prefix else os.environ.get("PREFIX", "/usr/local"))
DESTDIR   = args.dest_dir if args.dest_dir else os.environ.get("DESTDIR", "")

PWD       = os.getcwd()
_tmp      = PWD + "/.tmp"

LIB_FLAGS = ""

# list of -D defines
# for setting something, use 'KEY=VAL'
defs = [
	#"KEY=VAL"
	#"SOMEVAL"
]

# make the temporary directory
try:
	os.mkdir(_tmp)
except:
	pass

# -*- Tests / Libs


extlibs = {
	"gmp": {
		"CFLAGS":  "",
		"LDFLAGS": "-lgmp",
		"header_block": "#include <gmp.h>",
		"main_block": "mpz_t x; mpz_init(x); mpz_clear(x);",
	},
	"readline": {
		"CFLAGS":  "",
		"LDFLAGS": "-lreadline",
		"header_block": "#include <stdio.h>\n#include <readline/readline.h>",
		"main_block": "rl_bind_key('\\t', rl_insert);",
	},
	"libav": {
		"CFLAGS":  "",
		"LDFLAGS": "-lavformat -lavutil -lavcodec",
		"header_block": "#include <libavutil/opt.h>\n#include <libavcodec/avcodec.h>\n#include <libavformat/avformat.h>",
		"main_block": "AVFormatContext* format_ctx = avformat_alloc_context();",
	},
	"ffi": {
		"CFLAGS":  "",
		"LDFLAGS": "-lffi",
		"header_block": "#include <ffi.h>",
		"main_block": "ffi_cif cif; ffi_type *args[1];",
	},
	"fftw3": {
		"CFLAGS":  "",
		"LDFLAGS": "-lfftw3",
		"header_block": "#include <fftw3.h>",
		"main_block": "fftw_malloc(sizeof(fftw_complex) * 1024);",
	},
}

# makefile lines to include
makedefines = [

]


for name, val in extlibs.items():
	print (f" -- Searching for C library {name}...")
	print (f" --   Trying with:\n {val}")

	fname = _tmp + "/test.c"
	fp = open(fname, "w")
	fp.write(f"""

/* testing library '{name}' */

{val["header_block"]}

int main(int argc, char** argv) {{
	{val["main_block"]}
	return 0;
}}
	
""")
	fp.close()

	haslib = shell(f"{CC} {CFLAGS} {val['CFLAGS']} {fname} {LDFLAGS} {val['LDFLAGS']} -o {_tmp}/a.out") and shell(f"{_tmp}/a.out")

	if not haslib:
		print (f"{Col.WARN} --   Not found: {Col.BLU}{name}!{Col.RESET}")

		makedefines += [
			f"{name}_CFLAGS   := ",
			f"{name}_LIB      := ",
		]

	else:
		# add to variables
		# remove definitions
		#cflag = " ".join(filter(lambda arg: not arg.startswith("-D"), cflag.split(" ")))

		makedefines += [
			f"{name}_CFLAGS   := {val['CFLAGS']}",
			f"{name}_LIB      := {val['LDFLAGS']}",
		]

		defs += [
			f"KS_HAVE_{name.upper()}"
		]

		print (f"{Col.GRN} --   Found: {Col.BLU}{name}!{Col.RESET}")



# -*- Generate Files

# helper function to glob recursively and create a string of all results
def files(glob_pat, recursive=True):
    return " ".join(glob.glob(glob_pat, recursive=True))

# helper class for configuration
class _WithMessage:
	def __init__(self, name):
		self.name = name

	def __enter__(self):
		print (f" -- Configuring  '{self.name}'...")

	def __exit__(self, type, value, traceback):
		print (f" --   Done")


def genMsg(name, opts={}):
	print(" --- Configuring")

# write file
def write_file(fname, contents):
	cur_c = None
	try:
		fp = open(fname, 'r')
		cur_c = fp.read()
		fp.close()
	except:
		pass
	if cur_c != contents:
		fp = open(fname, 'w')
		fp.write(contents)
		fp.close() 


# newline
_nl = "\n"

# ending for a shared object (i.e. '.so' or '.dll')
SHARED_END = "so"
STATIC_END = "a"

KS_API_IMPORT = ""
KS_API_EXPORT = ""


# platforms
if sys.platform in ('linux', 'linux2'):
    defs.append("KS__LINUX")
elif sys.platform in ('darwin', ):
    defs.append("KS__MACOS")
elif sys.platform in ('win32', ):
    SHARED_END = "dll"
    STATIC_END = "lib"

    KS_API_IMPORT = "__declspec(dllimport)"
    KS_API_EXPORT = "__declspec(dllexport)"

    defs.append("KS__WINDOWS")

elif sys.platform in ('cygwin', ):
    SHARED_END = "dll"
    STATIC_END = "lib"

    KS_API_IMPORT = "__declspec(dllimport)"
    KS_API_EXPORT = "__declspec(dllexport)"

    defs.append("KS__CYGWIN")
else:
    defs.append("KS__OTHER")

defs.append("KS_SHARED_END \"" + SHARED_END + "\"")
defs.append("KS_STATIC_END \"" + STATIC_END + "\"")

warns = [

]

if "KS_OTHER" in defs:
    warns.append(f"Unknown platform '{sys.platform}' (from './configure' script)")


with _WithMessage("./include/ks-config"):

	write_file("./include/ks-config.h", f"""/* ks_config.h - (generated by ./configure). Please rerun ./configure, and do NOT modify this file!
*
* Configure Script Ran:
* $ {" ".join(sys.argv)}
*
* Vars:
* CC            = {CC}
* CFLAGS        = {CFLAGS}
* LDFLAGS       = {LDFLAGS}
* PREFIX        = {PREFIX}
* DESTDIR       = {DESTDIR}
* PWD           = {PWD}
* V             = {args.V}
* BUILD_TYPE    = {args.build_type}
* MODULES       = {args.M}
*
*
* Misc.:
* sys.platform  = {sys.platform}
*
*/

#pragma once
#ifndef KS_CONFIG_H__
#define KS_CONFIG_H__

#ifdef __cplusplus
extern "C" {{
#endif


/* VERSION */

#define KS_VERSION_MAJOR {args.V[0]}
#define KS_VERSION_MINOR {args.V[1]}
#define KS_VERSION_PATCH {args.V[2]}

#define KS_BUILD_STR "{args.build_type}"
#define KS_BUILD_{args.build_type.upper()}


/* platform info */

#define KS_PLATFORM_NAME "{sys.platform}"

#define KS_API_EXPORT {KS_API_EXPORT}
#define KS_API_IMPORT {KS_API_IMPORT}

#ifdef KS_BUILD
#define KS_API KS_API_EXPORT
#else
#define KS_API KS_API_IMPORT
#endif

#define KS_PREFIX "{PREFIX}"

/* attributes */



#if defined(__GNUC__)
#define __KS_WARN_UNUSED__ __attribute__ ((warn_unused_result))
#else 
#define __KS_WARN_UNUSED__
#endif



/* modules */

{_nl.join("#define KS_HAVE_MODULE_" + mod[mod.rfind('/')+1:].upper() for mod in args.M)}


/* misc. defines */

{_nl.join("#define " + str(df) for df in defs)}


/* warnings */

{_nl.join("#warning " + str(df) for df in warns)}


/* colors */

{c_color_defs}

/* extra */

#define _POSIX_C_SOURCE 199309L


#ifdef __cplusplus
}}
#endif

#endif /* KS_CONFIG_H__ */

""")


## ./Makefile


# generate code for a given module,
# returns (targets, installs, files, rules)
def gen_module(module):

	# get the configuration the module has
    cfp = configparser.ConfigParser()
    cfp.read(f"{module}/build.ini")

	# module name (no directory)
    name = module[module.rfind('/')+1:]

    # generated shared library
    target = f"lib/ksm/{name}/libksm_{name}.{SHARED_END}"

    # newly generated rules
    new_files = []

	# dependency modules
    c_deps    = cfp['Module']['DEPS'].split()
    c_libdeps = cfp['Module']['LIBDEPS'].split()
    c_files   = cfp['Compile']['FILES'].split()
    c_headers = cfp['Compile']['HEADERS'].split()

    c_CFLAGS = ""
    c_LDFLAGS = ""

    for libdep in c_libdeps:
        if f"KS_HAVE_{libdep.upper()}" in defs:
            c_CFLAGS += extlibs[libdep]["CFLAGS"]
            c_LDFLAGS += extlibs[libdep]["LDFLAGS"]
        else:
            raise BuildError(module, f"Attempting to build this module, but do not have required libdep: {libdep}")

	# object files
    gen_o = []
    gen_c = []

    installs = []

    for hed in c_headers:
        installs += [f"{hed}"]

    installs += [f"libksm_{name}.{SHARED_END}"]


	# go through all files to compile
    for fname in c_files:
        if fname.endswith('.c'):
            gen_c += [f"{module}/{fname}"]
            gen_o += [f"{module}/{fname.replace('.c', '.o')}"]
        else:
            raise BuildError(module, f"Unknown file type for file: {module}/{fname}")

    new_make  = f"""
# -- MODULE: {module} --

# header files
{name}_H := {" ".join(f"lib/ksm/{name}/{h}" for h in c_headers)}

{name}_C := {" ".join(gen_c)}
{name}_O := $(patsubst %.c,$(_tmp)/%.o,$({name}_C))

# compilation rule for one target
$(_tmp)/{module}/%.o: {module}/%.c $({name}_H) $(ks_H)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS){' ' + cfp['Compile']['CFLAGS'] if cfp['Compile']['CFLAGS'] else ''} {c_CFLAGS} -I./include -I{module} -DKS_BUILD {"".join(f"-I./modules/{dep}" for dep in c_deps)} $< -fPIC -c -o $@

# rule to copy headers
lib/ksm/{name}/%.h: {module}/%.h
	@mkdir -p $(dir $@)
	cp $< $@

# rule to generate target
{target}: $(libks_SHARED) $({name}_O) $({name}_H) $(ks_H)
	@mkdir -p $(dir $@)
	$(CC) $(LDFLAGS) {cfp['Compile']['LDFLAGS']} -L./lib -Wl,-rpath,'$$ORIGIN' \\
		$({name}_O) \\
		{c_LDFLAGS} {cfp['Compile']['LIBS']} -lks -shared -o $@
	@#$(STRIP) $@ $(STRIP_OPTS)
	{MAKE_SUCC}

"""


    return [target], installs, new_files, new_make


# make success
MAKE_SUCC = f"@echo {Col.SUCC} -- BUILT: {Col.BLU}$@{Col.SUCC} -- {Col.RESET}"

with _WithMessage("./Makefile"):

	mod_targets = []

	# makefile rules for the modules
	mod_rules = ""

	# extra generated files that need to be cleaned, for example
	mod_files = []

	mod_installs = []

	install_modules = ""

	for module in args.M:

		# now, configure a single module
		_targets, _installs, _files, _rules = gen_module(module)

		mod_targets += _targets
		mod_installs += _installs
		mod_files += _files
		mod_rules += _rules

		name = module[module.rfind('/')+1:]
		
		install_modules += f"\tinstall -d $(TODIR)/lib/ksm/{name}\n"

		for fl in _installs:
			install_modules += f"\tinstall -m 644 ./lib/ksm/{name}/{fl} $(TODIR)/lib/ksm/{name}\n"


	f_Makefile = open("./Makefile", "w")
	f_Makefile.write(f"""# -*- Makefile (generated by ./configure). Please rerun ./configure, and do NOT modify this file! -*-

# saved for static linking
# -Wl,-Bsymbolic -Wl,--whole-archive $(_include_static) -Wl,--no-whole-archive


# rpath flags
#  -Wl,-rpath,./lib -Wl,-rpath-link,./ 

# -- Version / Metadata --

KSV0           := {args.V[0]}
KSV1           := {args.V[1]}
KSV2           := {args.V[2]}
KSV            := $(KSV0).$(KSV1).$(KSV2)


# -- Paths / Files --

PREFIX         ?= {PREFIX}
DESTDIR        ?= {DESTDIR}

_tmp           := .tmp

# -- Commands / Utilities --

CC             := {CC}
CFLAGS         := {CFLAGS}
LDFLAGS        := {LDFLAGS}

STRIP          ?= #
STRIP_OPTS     ?= #
#STRIP          ?= strip
#STRIP_OPTS     ?= --strip-debug --strip-unneeded


# -- Main Library / Executable --

# general purpose headers
ks_H           := $(wildcard include/*.h)

# - libks, the main kscript library
libks_C        := $(wildcard src/*.c src/types/*.c)
libks_O        := $(patsubst %.c,$(_tmp)/%.o,$(libks_C))
libks_SHARED   := lib/libks.{SHARED_END}
libks_STATIC   := lib/libks.{STATIC_END}

# - ks, the kscript binary
ks_C           := $(wildcard src/ks/*.c)
ks_O           := $(patsubst %.c,$(_tmp)/%.o,$(ks_C))
ks_BIN         := bin/ks


# -- Unit Tests / Checks --

# kscript tests
tests_KS       := $(wildcard tests/*.ks)


# -- Rule Definitions --

# declare those that aren't actual files
.PHONY: default lib bin modules check install uninstall clean FORCE

# now, describe different build targets

default: $(libks_SHARED) modules $(ks_BIN)

lib: $(libks_SHARED) $(libks_STATIC)

bin: $(ks_BIN)

modules: {" ".join(mod_targets)}
	@echo {Col.SUCC}{Col.BOLD}ALL MODULES BUILT{Col.RESET}

check: $(tests_KS) FORCE
	@echo {Col.SUCC}{Col.BOLD}ALL TESTS PASSED{Col.RESET}


tests/%.ks: $(ks_BIN) FORCE
	@$(ks_BIN) $@ && echo {Col.SUCC}PASSED: {Col.BLU}$@{Col.RESET} || (echo {Col.FAIL}{Col.BOLD}FAILED: {Col.WARN}$@{Col.RESET} && exit 1)

# install directory
TODIR := $(DESTDIR)$(PREFIX)

# rule to install the whole package to PREFIX
install: $(ks_BIN) $(libks_SHARED) modules $(ks_H) FORCE
	install -d $(TODIR)/bin
	install -d $(TODIR)/include
	install -d $(TODIR)/lib/ksm

	install -d $(TODIR)/share/man/man1
	install -d $(TODIR)/share/doc/kscript

	install -m 755 $(ks_BIN) $(TODIR)/bin
	install -m 644 $(libks_SHARED) $(TODIR)/lib
	install -m 644 $(ks_H) $(TODIR)/include


	#gzip -9 -n -f $(TODIR)/share/doc/kscript/changelog
	#mv $(TODIR)/share/doc/kscript/changelog.gz $(TODIR)/share/doc/kscript/changelog.Debian.gz
	#gzip -9 -n -f $(TODIR)/share/man/man1/ks.1


# rule to uninstall the whole package from PREFIX
uninstall: FORCE
	rm -f $(TODIR)/bin/$(notdir $(ks_BIN))
	rm -f $(TODIR)/lib/$(notdir $(libks_STATIC)) $(TODIR)/lib/$(notdir $(libks_SHARED))
	rm -f $(patsubst %,$(TODIR)/include/%,$(notdir $(ks_H)))
	rm -f $(TODIR)/lib/ksm

clean: FORCE
	rm -rf $(wildcard $(_tmp) debian/usr build lib bin *.deb)

all: lib modules bin check install

# target to force another target
FORCE:


# rule to compile a single object file
$(_tmp)/src/%.o: src/%.c $(all_H)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -I./ -I./include -DKS_BUILD $< -fPIC -c -o $@

# rule to build the shared object file (.so) from all the individual compilations
# Since `libks_o` contains many files, we use `$^` to mean `all input files together`
$(libks_SHARED): $(libks_O)
	@mkdir -p $(dir $@)
	$(CC) $(LDFLAGS) -L./lib \\
		$(libks_O) \\
		-lm -ldl -lpthread -lgmp -lreadline -fPIC -shared -o $(libks_SHARED)
	@#$(STRIP) $@ $(STRIP_OPTS)
	{MAKE_SUCC}

# rule to build the static object file (.a)
$(libks_STATIC): $(libks_O)
	@mkdir -p $(dir $@)
	$(AR) cr $@ $^
	@#$(STRIP) $@ $(STRIP_OPTS)
	{MAKE_SUCC}

# rule to build the executable (no extension) from the library and it's `.o`'s
#   since we require a library, and object files, we don't use `$^`, but just build
#   explicitly
$(ks_BIN): $(libks_SHARED) $(ks_O)
	@mkdir -p $(dir $@)
	$(CC) $(LDFLAGS) -L./lib -Wl,-rpath,'$$ORIGIN' -Wl,-rpath,'$$ORIGIN/../lib' \\
		$(ks_O) \\
		-lm -ldl -lpthread -lks -o $@
	@#$(STRIP) $@ $(STRIP_OPTS)
	{MAKE_SUCC}


{mod_rules}

""")

	f_Makefile.close()



print ("-" * 80)

print (f"Configuration: kscript v{'.'.join(map(str, args.V))}")

print ("Modules:")

for mod in all_modules:
	print (f"  {'-+'[mod in args.M]} {mod}")


