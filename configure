#!/usr/bin/env python
""" configure - build configuration script, use like autotools


"""

import sys
import os
import glob

import argparse

class NegateAction(argparse.Action):
    def __call__(self, parser, ns, values, option):
        setattr(ns, self.dest, not option[2:].startswith('disable') and not option[2:].startswith('without') and not option[2:].startswith('no'))

parser = argparse.ArgumentParser(formatter_class=lambda prog: argparse.HelpFormatter(prog, max_help_position=40))

parser.add_argument('-V', nargs=3, type=int, help='The version of kscript (MAJOR, MINOR, PATCH)', default=[0, 0, 1])
parser.add_argument('--build-type', help='The build type that will be ran', choices=['debug', 'release'], default='release')

parser.add_argument('-M', nargs='*', help='Modules to build with kscript', default=glob.glob("modules/*"))

# enable/disable features
parser.add_argument('--enable-trace', '--disable-trace', dest='trace', action=NegateAction, nargs=0, help='Enables/disables \'ks_trace()\', disabling may increase performance', default=True)



args = parser.parse_args()

# -*- Config Vars

CC        = os.environ.get("CC",        "cc")
CFLAGS    = os.environ.get("CFLAGS",    "-O3 -std=c99")
LDFLAGS   = os.environ.get("LDFLAGS",   "")

PREFIX    = os.environ.get("PREFIX",    "/usr/local")

PWD       = os.getcwd()



# -*- Generate Files


# helper function to glob recursively and create a string of all results
def files(glob_pat, recursive=True):
    return " ".join(glob.glob(glob_pat, recursive=True))


# command to run on 'makefile' target success
MAKE_success = '@echo "\\n|| Built: $@\\n"'

# newline
_newline = "\n"

## include/ks-config.h


# header file warnings
defs = [

]

# platforms
if sys.platform in ('linux', 'linux2'):
    defs.append("KS__LINUX")
elif sys.platform in ('darwin', ):
    defs.append("KS__MACOS")
elif sys.platform in ('win32', 'cygwin'):
    defs.append("KS__WINDOWS")
else:
    defs.append("KS__OTHER")

warns = [

]

if "KS_OTHER" in defs:
    warns.append(f"Unknown platform '{sys.platform}' (from './configure' script)")


f_config = open("./include/ks-config.h", "w")

f_config.write(f"""/* ks_config.h - (generated by ./configure). Please rerun ./configure, and do NOT modify this file!
 *
 * Configure Script Ran:
 * $ {" ".join(sys.argv)}
 *
 * Vars:
 * CC            = {CC}
 * CFLAGS        = {CFLAGS}
 * LDFLAGS       = {LDFLAGS}
 * PREFIX        = {PREFIX}
 * PWD           = {PWD}
 * V             = {args.V}
 * BUILD_TYPE    = {args.build_type}
 * MODULES       = {args.M}
 *
 *
 * Misc.:
 * sys.platform  = {sys.platform}
 *
 */

#pragma once
#ifndef KS_CONFIG_H__
#define KS_CONFIG_H__

#ifdef __cplusplus
extern "C" {{
#endif


/* VERSION */

#define KS_VERSION_MAJOR {args.V[0]}
#define KS_VERSION_MINOR {args.V[1]}
#define KS_VERSION_PATCH {args.V[2]}

#define KS_BUILD_STR "{args.build_type}"
#define KS_BUILD_{args.build_type.upper()}



/* platform info */

#define KS_PLATFORM_NAME "{sys.platform}"


/* misc. defines */

{_newline.join("#define " + str(df) for df in defs)}


/* warnings */

{_newline.join("#warning " + str(df) for df in warns)}


#ifdef __cplusplus
}}
#endif

#endif /* KS_CONFIG_H__ */

""")

f_config.close()


## ./Makefile


f_Makefile = open("./Makefile", "w")

f_Makefile.write(f"""# -*- Makefile (generated by ./configure). Please rerun ./configure, and do NOT modify this file! -*-

# -*- VARS -*-

CC               := {CC}
CFLAGS           := {CFLAGS}
LDFLAGS          := {LDFLAGS}

INSTALL          ?= install

DESTDIR          ?= 
PREFIX           ?= {PREFIX}

_tmp             := {".tmp"}

STD_MODULES      := {" ".join(args.M)}

# -*- FILES -*-

# general purpose headers
all_H            := $(wildcard include/*.h)

# kscript library
libks_C          := {files("src/library/*.c")} {files("src/library/types/*.c")}

# kscript binary/commandline executable
ks_C             := {files("src/cmdline/*.c")}


# -*- TARGETS -*-

# target files
libks_SHARED     := lib/{"libks.so"}
libks_STATIC     := lib/{"libks.a"}
ks_BIN           := bin/{"ks"}

# generated
libks_O          := $(patsubst %.c,$(_tmp)/%.o,$(libks_C))
ks_O             := $(patsubst %.c,$(_tmp)/%.o,$(ks_C))


# -*- RULES -*-

.PHONY: default clean install uninstall modules


# default target to build
default: $(ks_BIN) $(libks_STATIC) $(libks_SHARED) modules

clean:
	rm -rf $(wildcard $(_tmp))
	-for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir clean ; \\
	done

modules:
	-for subdir in $(STD_MODULES); do \\
		$(MAKE) -C $$subdir ; \\
	done


# rule to install the whole package to PREFIX
install: default $(libks_so) $(ks_exe) $(libks_src_h)
	install -d $(DESTDIR)$(PREFIX)/bin/
	install -d $(DESTDIR)$(PREFIX)/lib/
	install -d $(DESTDIR)$(PREFIX)/include/

	install -m 777 $(ks_BIN) $(DESTDIR)$(PREFIX)/bin/
	install -m 644 $(libks_SHARED) $(libks_STATIC) $(DESTDIR)$(PREFIX)/lib/
	install -m 644 $(all_H) $(DESTDIR)$(PREFIX)/include/

# rule to uninstall the whole package from PREFIX
uninstall:
	rm -f $(DESTDIR)$(PREFIX)/bin/$(notdir $(ks_BIN))
	rm -f $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_STATIC)) $(DESTDIR)$(PREFIX)/lib/$(notdir $(libks_SHARED))
	rm -f $(patsubst %,$(DESTDIR)$(PREFIX)/include/%,$(notdir $(all_H)))


# rule to compile a single object file
$(_tmp)/src/%.o: src/%.c $(all_H)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -I{PWD}/include $< -fPIC -c -o $@

# rule to build the shared object file (.so) from all the individual compilations
# Since `libks_o` contains many files, we use `$^` to mean `all input files together`
$(libks_SHARED): $(libks_O)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $^ -shared -o $@
	{MAKE_success}

# rule to build the static object file (.a)
$(libks_STATIC): $(libks_O)
	@mkdir -p $(dir $@)
	$(AR) cr $@ $^
	{MAKE_success}

# rule to build the executable (no extension) from the library and it's `.o`'s
#   since we require a library, and object files, we don't use `$^`, but just build
#   explicitly
$(ks_BIN): $(libks_SHARED) $(libks_STATIC) modules $(ks_O)
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -Wl,-rpath=./lib/ -L./lib/ $(ks_O) -lks -lm -ldl -lpthread -lks -o $@
	{MAKE_success}


""")

f_Makefile.close()




#print (os.environ.get("CC", "cc"))





