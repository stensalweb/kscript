/* include/ks-unicode.h - unicode library header
 * NOTE: Do NOT modify this file! It was generated by `gen_unicode.py`
 *
 *
 * @author: Cade Brown <brown.cade@gmail.com>
 */

#pragma once
#ifndef KS_UNICODE_H__
#define KS_UNICODE_H__


// standard includes
#include <string.h>
#include <stdbool.h>

// integral type representing a single unicode code point
typedef int ks_unich;

// indicates there was an error
#define KS_UNICH_ERR ((ks_unich)(-1))


enum ks_unicat {
    ks_unicat_Lu = 1,
    ks_unicat_Ll = 2,
    ks_unicat_Lt = 3,
    ks_unicat_LC = 4,
    ks_unicat_Lm = 5,
    ks_unicat_Lo = 6,
    ks_unicat_L  = 7,
    ks_unicat_Mn = 8,
    ks_unicat_Mc = 9,
    ks_unicat_Me = 10,
    ks_unicat_M  = 11,
    ks_unicat_Nd = 12,
    ks_unicat_Nl = 13,
    ks_unicat_No = 14,
    ks_unicat_N  = 15,
    ks_unicat_Pc = 16,
    ks_unicat_Pd = 17,
    ks_unicat_Ps = 18,
    ks_unicat_Pe = 19,
    ks_unicat_Pi = 20,
    ks_unicat_Pf = 21,
    ks_unicat_Po = 22,
    ks_unicat_P  = 23,
    ks_unicat_Sm = 24,
    ks_unicat_Sc = 25,
    ks_unicat_Sk = 26,
    ks_unicat_So = 27,
    ks_unicat_S  = 28,
    ks_unicat_Zs = 29,
    ks_unicat_Zl = 30,
    ks_unicat_Zp = 31,
    ks_unicat_Z  = 32,
    ks_unicat_Cc = 33,
    ks_unicat_Cf = 34,
    ks_unicat_Cs = 35,
    ks_unicat_Co = 36,
    ks_unicat_Cn = 37,
    ks_unicat_C  = 38,
};


// information about a given codepoint
typedef struct {

    // (0) the codepoint index of the structure, i.e. the UTF32 value
    ks_unich cp;

    // (1) a human readable name, may or may not be in `<>`
    const char* name;

    // (2) General category, check `ks_unicat_*` values
    int cat_gen;

    // (3) Canonical combining classes
    int cat_com;

    // (4) Bidirectional category
    int cat_bidi;

    // (5) Character Decomposition Mapping
    int decomp_map;

    // (12, 13, 14) cases for upper, lower, and title case
    ks_unich case_upper, case_lower, case_title;

} ks_unich_info;


/* Character Lookup */

// return information about a given codepoint, or NULL if no such codepoint exists
const ks_unich_info* ks_uni_get_info(ks_unich chr);


// attempt to look up a codepoint with Unicode name `name` (has length `len`, not counting NUL-terminator), returning
//   either the codepoint, or a negative value to indicate it was not found
// NOTE: `name` should be upper case, include numbers, and match exactly the name found in the Unicode standard
// NOTE: if `len<0`, it is computed via `strlen(name)`
// EXAMPLES:
// uni_lookup("LATIN SMALL LETTER A", -1) == 'a';
ks_unich ks_uni_lookup(const char* name, int len);


/* Specific Checks (i.e. replacing 'ctype' library) */

// Return whether or not a given unicode character is alpha, i.e. part of the alphabet
bool ks_uni_isalpha(ks_unich chr);


#endif /*KS_UNICODE_H__ */

